// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	discovery_multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/discovery.multicluster.solo.io/v1alpha1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type AwsDiscoverySet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) bool) []*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery
	// Return the Set as a map of key to resource.
	Map() map[string]*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery
	// Insert a resource into the set.
	Insert(awsDiscovery ...*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(awsDiscoverySet AwsDiscoverySet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(awsDiscovery ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(awsDiscovery ezkube.ResourceId)
	// Return the union with the provided set
	Union(set AwsDiscoverySet) AwsDiscoverySet
	// Return the difference with the provided set
	Difference(set AwsDiscoverySet) AwsDiscoverySet
	// Return the intersection with the provided set
	Intersection(set AwsDiscoverySet) AwsDiscoverySet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery, error)
	// Get the length of the set
	Length() int
}

func makeGenericAwsDiscoverySet(awsDiscoveryList []*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range awsDiscoveryList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type awsDiscoverySet struct {
	set sksets.ResourceSet
}

func NewAwsDiscoverySet(awsDiscoveryList ...*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) AwsDiscoverySet {
	return &awsDiscoverySet{set: makeGenericAwsDiscoverySet(awsDiscoveryList)}
}

func NewAwsDiscoverySetFromList(awsDiscoveryList *discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryList) AwsDiscoverySet {
	list := make([]*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery, 0, len(awsDiscoveryList.Items))
	for idx := range awsDiscoveryList.Items {
		list = append(list, &awsDiscoveryList.Items[idx])
	}
	return &awsDiscoverySet{set: makeGenericAwsDiscoverySet(list)}
}

func (s *awsDiscoverySet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.set.Keys()
}

func (s *awsDiscoverySet) List(filterResource ...func(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) bool) []*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery))
		})
	}

	var awsDiscoveryList []*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery
	for _, obj := range s.set.List(genericFilters...) {
		awsDiscoveryList = append(awsDiscoveryList, obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery))
	}
	return awsDiscoveryList
}

func (s *awsDiscoverySet) Map() map[string]*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery {
	if s == nil {
		return nil
	}

	newMap := map[string]*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	}
	return newMap
}

func (s *awsDiscoverySet) Insert(
	awsDiscoveryList ...*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range awsDiscoveryList {
		s.set.Insert(obj)
	}
}

func (s *awsDiscoverySet) Has(awsDiscovery ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.set.Has(awsDiscovery)
}

func (s *awsDiscoverySet) Equal(
	awsDiscoverySet AwsDiscoverySet,
) bool {
	if s == nil {
		return awsDiscoverySet == nil
	}
	return s.set.Equal(makeGenericAwsDiscoverySet(awsDiscoverySet.List()))
}

func (s *awsDiscoverySet) Delete(AwsDiscovery ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.set.Delete(AwsDiscovery)
}

func (s *awsDiscoverySet) Union(set AwsDiscoverySet) AwsDiscoverySet {
	if s == nil {
		return set
	}
	return NewAwsDiscoverySet(append(s.List(), set.List()...)...)
}

func (s *awsDiscoverySet) Difference(set AwsDiscoverySet) AwsDiscoverySet {
	if s == nil {
		return set
	}
	newSet := s.set.Difference(makeGenericAwsDiscoverySet(set.List()))
	return &awsDiscoverySet{set: newSet}
}

func (s *awsDiscoverySet) Intersection(set AwsDiscoverySet) AwsDiscoverySet {
	if s == nil {
		return nil
	}
	newSet := s.set.Intersection(makeGenericAwsDiscoverySet(set.List()))
	var awsDiscoveryList []*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery
	for _, obj := range newSet.List() {
		awsDiscoveryList = append(awsDiscoveryList, obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery))
	}
	return NewAwsDiscoverySet(awsDiscoveryList...)
}

func (s *awsDiscoverySet) Find(id ezkube.ResourceId) (*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find AwsDiscovery %v", sksets.Key(id))
	}
	obj, err := s.set.Find(&discovery_multicluster_solo_io_v1alpha1.AwsDiscovery{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery), nil
}

func (s *awsDiscoverySet) Length() int {
	if s == nil {
		return 0
	}
	return s.set.Length()
}
