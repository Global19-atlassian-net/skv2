// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	discovery_multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/discovery.multicluster.solo.io/v1alpha1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type AwsDiscoveryDirectiveSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) bool) []*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective
	// Return the Set as a map of key to resource.
	Map() map[string]*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective
	// Insert a resource into the set.
	Insert(awsDiscoveryDirective ...*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(awsDiscoveryDirectiveSet AwsDiscoveryDirectiveSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(awsDiscoveryDirective ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(awsDiscoveryDirective ezkube.ResourceId)
	// Return the union with the provided set
	Union(set AwsDiscoveryDirectiveSet) AwsDiscoveryDirectiveSet
	// Return the difference with the provided set
	Difference(set AwsDiscoveryDirectiveSet) AwsDiscoveryDirectiveSet
	// Return the intersection with the provided set
	Intersection(set AwsDiscoveryDirectiveSet) AwsDiscoveryDirectiveSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective, error)
	// Get the length of the set
	Length() int
}

func makeGenericAwsDiscoveryDirectiveSet(awsDiscoveryDirectiveList []*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range awsDiscoveryDirectiveList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type awsDiscoveryDirectiveSet struct {
	set sksets.ResourceSet
}

func NewAwsDiscoveryDirectiveSet(awsDiscoveryDirectiveList ...*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) AwsDiscoveryDirectiveSet {
	return &awsDiscoveryDirectiveSet{set: makeGenericAwsDiscoveryDirectiveSet(awsDiscoveryDirectiveList)}
}

func NewAwsDiscoveryDirectiveSetFromList(awsDiscoveryDirectiveList *discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirectiveList) AwsDiscoveryDirectiveSet {
	list := make([]*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective, 0, len(awsDiscoveryDirectiveList.Items))
	for idx := range awsDiscoveryDirectiveList.Items {
		list = append(list, &awsDiscoveryDirectiveList.Items[idx])
	}
	return &awsDiscoveryDirectiveSet{set: makeGenericAwsDiscoveryDirectiveSet(list)}
}

func (s *awsDiscoveryDirectiveSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.set.Keys()
}

func (s *awsDiscoveryDirectiveSet) List(filterResource ...func(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) bool) []*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective))
		})
	}

	var awsDiscoveryDirectiveList []*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective
	for _, obj := range s.set.List(genericFilters...) {
		awsDiscoveryDirectiveList = append(awsDiscoveryDirectiveList, obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective))
	}
	return awsDiscoveryDirectiveList
}

func (s *awsDiscoveryDirectiveSet) Map() map[string]*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective {
	if s == nil {
		return nil
	}

	newMap := map[string]*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective{}
	for k, v := range s.set.Map() {
		newMap[k] = v.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective)
	}
	return newMap
}

func (s *awsDiscoveryDirectiveSet) Insert(
	awsDiscoveryDirectiveList ...*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range awsDiscoveryDirectiveList {
		s.set.Insert(obj)
	}
}

func (s *awsDiscoveryDirectiveSet) Has(awsDiscoveryDirective ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.set.Has(awsDiscoveryDirective)
}

func (s *awsDiscoveryDirectiveSet) Equal(
	awsDiscoveryDirectiveSet AwsDiscoveryDirectiveSet,
) bool {
	if s == nil {
		return awsDiscoveryDirectiveSet == nil
	}
	return s.set.Equal(makeGenericAwsDiscoveryDirectiveSet(awsDiscoveryDirectiveSet.List()))
}

func (s *awsDiscoveryDirectiveSet) Delete(AwsDiscoveryDirective ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.set.Delete(AwsDiscoveryDirective)
}

func (s *awsDiscoveryDirectiveSet) Union(set AwsDiscoveryDirectiveSet) AwsDiscoveryDirectiveSet {
	if s == nil {
		return set
	}
	return NewAwsDiscoveryDirectiveSet(append(s.List(), set.List()...)...)
}

func (s *awsDiscoveryDirectiveSet) Difference(set AwsDiscoveryDirectiveSet) AwsDiscoveryDirectiveSet {
	if s == nil {
		return set
	}
	newSet := s.set.Difference(makeGenericAwsDiscoveryDirectiveSet(set.List()))
	return &awsDiscoveryDirectiveSet{set: newSet}
}

func (s *awsDiscoveryDirectiveSet) Intersection(set AwsDiscoveryDirectiveSet) AwsDiscoveryDirectiveSet {
	if s == nil {
		return nil
	}
	newSet := s.set.Intersection(makeGenericAwsDiscoveryDirectiveSet(set.List()))
	var awsDiscoveryDirectiveList []*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective
	for _, obj := range newSet.List() {
		awsDiscoveryDirectiveList = append(awsDiscoveryDirectiveList, obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective))
	}
	return NewAwsDiscoveryDirectiveSet(awsDiscoveryDirectiveList...)
}

func (s *awsDiscoveryDirectiveSet) Find(id ezkube.ResourceId) (*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find AwsDiscoveryDirective %v", sksets.Key(id))
	}
	obj, err := s.set.Find(&discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective), nil
}

func (s *awsDiscoveryDirectiveSet) Length() int {
	if s == nil {
		return 0
	}
	return s.set.Length()
}
