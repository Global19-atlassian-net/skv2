// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	discovery_multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/discovery.multicluster.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the AwsDiscovery Resource
// DEPRECATED: Prefer reconciler pattern.
type AwsDiscoveryEventHandler interface {
	CreateAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
	UpdateAwsDiscovery(old, new *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
	DeleteAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
	GenericAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
}

type AwsDiscoveryEventHandlerFuncs struct {
	OnCreate  func(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
	OnUpdate  func(old, new *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
	OnDelete  func(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
	OnGeneric func(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
}

func (f *AwsDiscoveryEventHandlerFuncs) CreateAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *AwsDiscoveryEventHandlerFuncs) DeleteAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *AwsDiscoveryEventHandlerFuncs) UpdateAwsDiscovery(objOld, objNew *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *AwsDiscoveryEventHandlerFuncs) GenericAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type AwsDiscoveryEventWatcher interface {
	AddEventHandler(ctx context.Context, h AwsDiscoveryEventHandler, predicates ...predicate.Predicate) error
}

type awsDiscoveryEventWatcher struct {
	watcher events.EventWatcher
}

func NewAwsDiscoveryEventWatcher(name string, mgr manager.Manager) AwsDiscoveryEventWatcher {
	return &awsDiscoveryEventWatcher{
		watcher: events.NewWatcher(name, mgr, &discovery_multicluster_solo_io_v1alpha1.AwsDiscovery{}),
	}
}

func (c *awsDiscoveryEventWatcher) AddEventHandler(ctx context.Context, h AwsDiscoveryEventHandler, predicates ...predicate.Predicate) error {
	handler := genericAwsDiscoveryHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericAwsDiscoveryHandler implements a generic events.EventHandler
type genericAwsDiscoveryHandler struct {
	handler AwsDiscoveryEventHandler
}

func (h genericAwsDiscoveryHandler) Create(object runtime.Object) error {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return errors.Errorf("internal error: AwsDiscovery handler received event for %T", object)
	}
	return h.handler.CreateAwsDiscovery(obj)
}

func (h genericAwsDiscoveryHandler) Delete(object runtime.Object) error {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return errors.Errorf("internal error: AwsDiscovery handler received event for %T", object)
	}
	return h.handler.DeleteAwsDiscovery(obj)
}

func (h genericAwsDiscoveryHandler) Update(old, new runtime.Object) error {
	objOld, ok := old.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return errors.Errorf("internal error: AwsDiscovery handler received event for %T", old)
	}
	objNew, ok := new.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return errors.Errorf("internal error: AwsDiscovery handler received event for %T", new)
	}
	return h.handler.UpdateAwsDiscovery(objOld, objNew)
}

func (h genericAwsDiscoveryHandler) Generic(object runtime.Object) error {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return errors.Errorf("internal error: AwsDiscovery handler received event for %T", object)
	}
	return h.handler.GenericAwsDiscovery(obj)
}
