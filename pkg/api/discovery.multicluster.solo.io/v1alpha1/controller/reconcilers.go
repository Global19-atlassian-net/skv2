// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	discovery_multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/discovery.multicluster.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the AwsDiscoveryDirective Resource.
// implemented by the user
type AwsDiscoveryDirectiveReconciler interface {
	ReconcileAwsDiscoveryDirective(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) (reconcile.Result, error)
}

// Reconcile deletion events for the AwsDiscoveryDirective Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type AwsDiscoveryDirectiveDeletionReconciler interface {
	ReconcileAwsDiscoveryDirectiveDeletion(req reconcile.Request) error
}

type AwsDiscoveryDirectiveReconcilerFuncs struct {
	OnReconcileAwsDiscoveryDirective         func(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) (reconcile.Result, error)
	OnReconcileAwsDiscoveryDirectiveDeletion func(req reconcile.Request) error
}

func (f *AwsDiscoveryDirectiveReconcilerFuncs) ReconcileAwsDiscoveryDirective(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) (reconcile.Result, error) {
	if f.OnReconcileAwsDiscoveryDirective == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileAwsDiscoveryDirective(obj)
}

func (f *AwsDiscoveryDirectiveReconcilerFuncs) ReconcileAwsDiscoveryDirectiveDeletion(req reconcile.Request) error {
	if f.OnReconcileAwsDiscoveryDirectiveDeletion == nil {
		return nil
	}
	return f.OnReconcileAwsDiscoveryDirectiveDeletion(req)
}

// Reconcile and finalize the AwsDiscoveryDirective Resource
// implemented by the user
type AwsDiscoveryDirectiveFinalizer interface {
	AwsDiscoveryDirectiveReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	AwsDiscoveryDirectiveFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeAwsDiscoveryDirective(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective) error
}

type AwsDiscoveryDirectiveReconcileLoop interface {
	RunAwsDiscoveryDirectiveReconciler(ctx context.Context, rec AwsDiscoveryDirectiveReconciler, predicates ...predicate.Predicate) error
}

type awsDiscoveryDirectiveReconcileLoop struct {
	loop reconcile.Loop
}

func NewAwsDiscoveryDirectiveReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) AwsDiscoveryDirectiveReconcileLoop {
	return &awsDiscoveryDirectiveReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective{}, options),
	}
}

func (c *awsDiscoveryDirectiveReconcileLoop) RunAwsDiscoveryDirectiveReconciler(ctx context.Context, reconciler AwsDiscoveryDirectiveReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericAwsDiscoveryDirectiveReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(AwsDiscoveryDirectiveFinalizer); ok {
		reconcilerWrapper = genericAwsDiscoveryDirectiveFinalizer{
			genericAwsDiscoveryDirectiveReconciler: genericReconciler,
			finalizingReconciler:                   finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericAwsDiscoveryDirectiveHandler implements a generic reconcile.Reconciler
type genericAwsDiscoveryDirectiveReconciler struct {
	reconciler AwsDiscoveryDirectiveReconciler
}

func (r genericAwsDiscoveryDirectiveReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: AwsDiscoveryDirective handler received event for %T", object)
	}
	return r.reconciler.ReconcileAwsDiscoveryDirective(obj)
}

func (r genericAwsDiscoveryDirectiveReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(AwsDiscoveryDirectiveDeletionReconciler); ok {
		return deletionReconciler.ReconcileAwsDiscoveryDirectiveDeletion(request)
	}
	return nil
}

// genericAwsDiscoveryDirectiveFinalizer implements a generic reconcile.FinalizingReconciler
type genericAwsDiscoveryDirectiveFinalizer struct {
	genericAwsDiscoveryDirectiveReconciler
	finalizingReconciler AwsDiscoveryDirectiveFinalizer
}

func (r genericAwsDiscoveryDirectiveFinalizer) FinalizerName() string {
	return r.finalizingReconciler.AwsDiscoveryDirectiveFinalizerName()
}

func (r genericAwsDiscoveryDirectiveFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscoveryDirective)
	if !ok {
		return errors.Errorf("internal error: AwsDiscoveryDirective handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeAwsDiscoveryDirective(obj)
}
