// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	discovery_multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/discovery.multicluster.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the AwsDiscovery Resource.
// implemented by the user
type AwsDiscoveryReconciler interface {
	ReconcileAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) (reconcile.Result, error)
}

// Reconcile deletion events for the AwsDiscovery Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type AwsDiscoveryDeletionReconciler interface {
	ReconcileAwsDiscoveryDeletion(req reconcile.Request) error
}

type AwsDiscoveryReconcilerFuncs struct {
	OnReconcileAwsDiscovery         func(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) (reconcile.Result, error)
	OnReconcileAwsDiscoveryDeletion func(req reconcile.Request) error
}

func (f *AwsDiscoveryReconcilerFuncs) ReconcileAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) (reconcile.Result, error) {
	if f.OnReconcileAwsDiscovery == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileAwsDiscovery(obj)
}

func (f *AwsDiscoveryReconcilerFuncs) ReconcileAwsDiscoveryDeletion(req reconcile.Request) error {
	if f.OnReconcileAwsDiscoveryDeletion == nil {
		return nil
	}
	return f.OnReconcileAwsDiscoveryDeletion(req)
}

// Reconcile and finalize the AwsDiscovery Resource
// implemented by the user
type AwsDiscoveryFinalizer interface {
	AwsDiscoveryReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	AwsDiscoveryFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeAwsDiscovery(obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) error
}

type AwsDiscoveryReconcileLoop interface {
	RunAwsDiscoveryReconciler(ctx context.Context, rec AwsDiscoveryReconciler, predicates ...predicate.Predicate) error
}

type awsDiscoveryReconcileLoop struct {
	loop reconcile.Loop
}

func NewAwsDiscoveryReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) AwsDiscoveryReconcileLoop {
	return &awsDiscoveryReconcileLoop{
		loop: reconcile.NewLoop(name, mgr, &discovery_multicluster_solo_io_v1alpha1.AwsDiscovery{}, options),
	}
}

func (c *awsDiscoveryReconcileLoop) RunAwsDiscoveryReconciler(ctx context.Context, reconciler AwsDiscoveryReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericAwsDiscoveryReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(AwsDiscoveryFinalizer); ok {
		reconcilerWrapper = genericAwsDiscoveryFinalizer{
			genericAwsDiscoveryReconciler: genericReconciler,
			finalizingReconciler:          finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericAwsDiscoveryHandler implements a generic reconcile.Reconciler
type genericAwsDiscoveryReconciler struct {
	reconciler AwsDiscoveryReconciler
}

func (r genericAwsDiscoveryReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: AwsDiscovery handler received event for %T", object)
	}
	return r.reconciler.ReconcileAwsDiscovery(obj)
}

func (r genericAwsDiscoveryReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(AwsDiscoveryDeletionReconciler); ok {
		return deletionReconciler.ReconcileAwsDiscoveryDeletion(request)
	}
	return nil
}

// genericAwsDiscoveryFinalizer implements a generic reconcile.FinalizingReconciler
type genericAwsDiscoveryFinalizer struct {
	genericAwsDiscoveryReconciler
	finalizingReconciler AwsDiscoveryFinalizer
}

func (r genericAwsDiscoveryFinalizer) FinalizerName() string {
	return r.finalizingReconciler.AwsDiscoveryFinalizerName()
}

func (r genericAwsDiscoveryFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return errors.Errorf("internal error: AwsDiscovery handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeAwsDiscovery(obj)
}
