// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	discovery_multicluster_solo_io_v1alpha1 "github.com/solo-io/skv2/pkg/api/discovery.multicluster.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the AwsDiscovery Resource across clusters.
// implemented by the user
type MulticlusterAwsDiscoveryReconciler interface {
	ReconcileAwsDiscovery(clusterName string, obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) (reconcile.Result, error)
}

// Reconcile deletion events for the AwsDiscovery Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterAwsDiscoveryDeletionReconciler interface {
	ReconcileAwsDiscoveryDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterAwsDiscoveryReconcilerFuncs struct {
	OnReconcileAwsDiscovery         func(clusterName string, obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) (reconcile.Result, error)
	OnReconcileAwsDiscoveryDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterAwsDiscoveryReconcilerFuncs) ReconcileAwsDiscovery(clusterName string, obj *discovery_multicluster_solo_io_v1alpha1.AwsDiscovery) (reconcile.Result, error) {
	if f.OnReconcileAwsDiscovery == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileAwsDiscovery(clusterName, obj)
}

func (f *MulticlusterAwsDiscoveryReconcilerFuncs) ReconcileAwsDiscoveryDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileAwsDiscoveryDeletion == nil {
		return nil
	}
	return f.OnReconcileAwsDiscoveryDeletion(clusterName, req)
}

type MulticlusterAwsDiscoveryReconcileLoop interface {
	// AddMulticlusterAwsDiscoveryReconciler adds a MulticlusterAwsDiscoveryReconciler to the MulticlusterAwsDiscoveryReconcileLoop.
	AddMulticlusterAwsDiscoveryReconciler(ctx context.Context, rec MulticlusterAwsDiscoveryReconciler, predicates ...predicate.Predicate)
}

type multiclusterAwsDiscoveryReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterAwsDiscoveryReconcileLoop) AddMulticlusterAwsDiscoveryReconciler(ctx context.Context, rec MulticlusterAwsDiscoveryReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericAwsDiscoveryMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterAwsDiscoveryReconcileLoop(name string, cw multicluster.ClusterWatcher) MulticlusterAwsDiscoveryReconcileLoop {
	return &multiclusterAwsDiscoveryReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &discovery_multicluster_solo_io_v1alpha1.AwsDiscovery{})}
}

type genericAwsDiscoveryMulticlusterReconciler struct {
	reconciler MulticlusterAwsDiscoveryReconciler
}

func (g genericAwsDiscoveryMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterAwsDiscoveryDeletionReconciler); ok {
		return deletionReconciler.ReconcileAwsDiscoveryDeletion(cluster, req)
	}
	return nil
}

func (g genericAwsDiscoveryMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*discovery_multicluster_solo_io_v1alpha1.AwsDiscovery)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: AwsDiscovery handler received event for %T", object)
	}
	return g.reconciler.ReconcileAwsDiscovery(cluster, obj)
}
