// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/skv2/api/multicluster/discovery/v1alpha1/aws_discovery.proto

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//
//Discovery configuration for AWS resources.
type AwsDiscoveryDirectiveSpec struct {
	// If unspecified, by default discovery will run for EKS clusters in all regions.
	EksSelector          []*AwsDiscoveryDirectiveSpec_AwsResourceSelector `protobuf:"bytes,2,rep,name=eks_selector,json=eksSelector,proto3" json:"eks_selector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *AwsDiscoveryDirectiveSpec) Reset()         { *m = AwsDiscoveryDirectiveSpec{} }
func (m *AwsDiscoveryDirectiveSpec) String() string { return proto.CompactTextString(m) }
func (*AwsDiscoveryDirectiveSpec) ProtoMessage()    {}
func (*AwsDiscoveryDirectiveSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b8f6d4627dc227, []int{0}
}
func (m *AwsDiscoveryDirectiveSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec.Unmarshal(m, b)
}
func (m *AwsDiscoveryDirectiveSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec.Marshal(b, m, deterministic)
}
func (m *AwsDiscoveryDirectiveSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsDiscoveryDirectiveSpec.Merge(m, src)
}
func (m *AwsDiscoveryDirectiveSpec) XXX_Size() int {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec.Size(m)
}
func (m *AwsDiscoveryDirectiveSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsDiscoveryDirectiveSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AwsDiscoveryDirectiveSpec proto.InternalMessageInfo

func (m *AwsDiscoveryDirectiveSpec) GetEksSelector() []*AwsDiscoveryDirectiveSpec_AwsResourceSelector {
	if m != nil {
		return m.EksSelector
	}
	return nil
}

// For a given resource_selector to apply to a resource, the resource must match all of the resource_selector's match criteria.
type AwsDiscoveryDirectiveSpec_AwsResourceSelector struct {
	// Types that are valid to be assigned to SelectorType:
	//	*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn
	//	*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_
	SelectorType         isAwsDiscoveryDirectiveSpec_AwsResourceSelector_SelectorType `protobuf_oneof:"selector_type"`
	XXX_NoUnkeyedLiteral struct{}                                                     `json:"-"`
	XXX_unrecognized     []byte                                                       `json:"-"`
	XXX_sizecache        int32                                                        `json:"-"`
}

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) Reset() {
	*m = AwsDiscoveryDirectiveSpec_AwsResourceSelector{}
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) String() string {
	return proto.CompactTextString(m)
}
func (*AwsDiscoveryDirectiveSpec_AwsResourceSelector) ProtoMessage() {}
func (*AwsDiscoveryDirectiveSpec_AwsResourceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b8f6d4627dc227, []int{0, 0}
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector.Unmarshal(m, b)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector.Marshal(b, m, deterministic)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector.Merge(m, src)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) XXX_Size() int {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector.Size(m)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector proto.InternalMessageInfo

type isAwsDiscoveryDirectiveSpec_AwsResourceSelector_SelectorType interface {
	isAwsDiscoveryDirectiveSpec_AwsResourceSelector_SelectorType()
	Equal(interface{}) bool
}

type AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn struct {
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3,oneof" json:"arn,omitempty"`
}
type AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_ struct {
	Matcher *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher `protobuf:"bytes,2,opt,name=matcher,proto3,oneof" json:"matcher,omitempty"`
}

func (*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn) isAwsDiscoveryDirectiveSpec_AwsResourceSelector_SelectorType() {
}
func (*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_) isAwsDiscoveryDirectiveSpec_AwsResourceSelector_SelectorType() {
}

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) GetSelectorType() isAwsDiscoveryDirectiveSpec_AwsResourceSelector_SelectorType {
	if m != nil {
		return m.SelectorType
	}
	return nil
}

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) GetArn() string {
	if x, ok := m.GetSelectorType().(*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn); ok {
		return x.Arn
	}
	return ""
}

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector) GetMatcher() *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher {
	if x, ok := m.GetSelectorType().(*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_); ok {
		return x.Matcher
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AwsDiscoveryDirectiveSpec_AwsResourceSelector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn)(nil),
		(*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_)(nil),
	}
}

// Selects all resources that exist in the specified AWS region and possess the specified tags.
type AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher struct {
	// AWS account IDs. If unspecified, select across any accessible AWS account.
	AccountIds []string `protobuf:"bytes,1,rep,name=account_ids,json=accountIds,proto3" json:"account_ids,omitempty"`
	// AWS regions, e.g. us-east-2. If unspecified, select across all regions.
	Regions []string `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty"`
	// AWS resource tags. If unspecified, match any tags.
	Tags                 map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) Reset() {
	*m = AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher{}
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) String() string {
	return proto.CompactTextString(m)
}
func (*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) ProtoMessage() {}
func (*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b8f6d4627dc227, []int{0, 0, 0}
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher.Unmarshal(m, b)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher.Marshal(b, m, deterministic)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher.Merge(m, src)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) XXX_Size() int {
	return xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher.Size(m)
}
func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher.DiscardUnknown(m)
}

var xxx_messageInfo_AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher proto.InternalMessageInfo

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) GetAccountIds() []string {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type AwsDiscoveryDirectiveStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AwsDiscoveryDirectiveStatus) Reset()         { *m = AwsDiscoveryDirectiveStatus{} }
func (m *AwsDiscoveryDirectiveStatus) String() string { return proto.CompactTextString(m) }
func (*AwsDiscoveryDirectiveStatus) ProtoMessage()    {}
func (*AwsDiscoveryDirectiveStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0b8f6d4627dc227, []int{1}
}
func (m *AwsDiscoveryDirectiveStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AwsDiscoveryDirectiveStatus.Unmarshal(m, b)
}
func (m *AwsDiscoveryDirectiveStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AwsDiscoveryDirectiveStatus.Marshal(b, m, deterministic)
}
func (m *AwsDiscoveryDirectiveStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsDiscoveryDirectiveStatus.Merge(m, src)
}
func (m *AwsDiscoveryDirectiveStatus) XXX_Size() int {
	return xxx_messageInfo_AwsDiscoveryDirectiveStatus.Size(m)
}
func (m *AwsDiscoveryDirectiveStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsDiscoveryDirectiveStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AwsDiscoveryDirectiveStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AwsDiscoveryDirectiveSpec)(nil), "discovery.multicluster.solo.io.AwsDiscoveryDirectiveSpec")
	proto.RegisterType((*AwsDiscoveryDirectiveSpec_AwsResourceSelector)(nil), "discovery.multicluster.solo.io.AwsDiscoveryDirectiveSpec.AwsResourceSelector")
	proto.RegisterType((*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher)(nil), "discovery.multicluster.solo.io.AwsDiscoveryDirectiveSpec.AwsResourceSelector.Matcher")
	proto.RegisterMapType((map[string]string)(nil), "discovery.multicluster.solo.io.AwsDiscoveryDirectiveSpec.AwsResourceSelector.Matcher.TagsEntry")
	proto.RegisterType((*AwsDiscoveryDirectiveStatus)(nil), "discovery.multicluster.solo.io.AwsDiscoveryDirectiveStatus")
}

func init() {
	proto.RegisterFile("github.com/solo-io/skv2/api/multicluster/discovery/v1alpha1/aws_discovery.proto", fileDescriptor_c0b8f6d4627dc227)
}

var fileDescriptor_c0b8f6d4627dc227 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xb1, 0x6e, 0xd4, 0x40,
	0x14, 0x8c, 0xe3, 0x83, 0x93, 0xdf, 0x81, 0x40, 0x4b, 0x0a, 0x63, 0x44, 0x38, 0xa5, 0xba, 0x86,
	0x5d, 0xe5, 0x28, 0x40, 0x74, 0x44, 0x41, 0x84, 0x22, 0x42, 0x6c, 0xa0, 0xa1, 0xb1, 0x36, 0x7b,
	0x4f, 0xbe, 0x95, 0x7d, 0xb7, 0x66, 0xdf, 0xda, 0x89, 0x7f, 0x87, 0x8a, 0x9a, 0x8a, 0xef, 0xe1,
	0x13, 0x90, 0xe8, 0x91, 0xed, 0xf3, 0x41, 0x91, 0xa4, 0x82, 0x6e, 0x67, 0xbc, 0x6f, 0xde, 0x78,
	0x34, 0x0b, 0xef, 0x32, 0xe3, 0x97, 0xd5, 0x39, 0xd7, 0x76, 0x25, 0xc8, 0x16, 0xf6, 0xa9, 0xb1,
	0x82, 0xf2, 0x7a, 0x2e, 0x54, 0x69, 0xc4, 0xaa, 0x2a, 0xbc, 0xd1, 0x45, 0x45, 0x1e, 0x9d, 0x58,
	0x18, 0xd2, 0xb6, 0x46, 0xd7, 0x88, 0xfa, 0x50, 0x15, 0xe5, 0x52, 0x1d, 0x0a, 0x75, 0x41, 0xe9,
	0x96, 0xe6, 0xa5, 0xb3, 0xde, 0xb2, 0xfd, 0x3f, 0xc4, 0xdf, 0xe3, 0xbc, 0x15, 0xe7, 0xc6, 0x26,
	0x7b, 0x99, 0xcd, 0x6c, 0x77, 0x55, 0xb4, 0xa7, 0x7e, 0x2a, 0x61, 0x78, 0xe9, 0x7b, 0x12, 0x2f,
	0x7d, 0xcf, 0x1d, 0x7c, 0x1b, 0xc1, 0xc3, 0x57, 0x17, 0x74, 0x3c, 0xe8, 0x1d, 0x1b, 0x87, 0xda,
	0x9b, 0x1a, 0xcf, 0x4a, 0xd4, 0xac, 0x84, 0x3b, 0x98, 0x53, 0x4a, 0x58, 0xa0, 0xf6, 0xd6, 0xc5,
	0xbb, 0xd3, 0x70, 0x36, 0x99, 0x9f, 0xf2, 0x9b, 0xd7, 0xf3, 0x6b, 0x05, 0xdb, 0x2f, 0x12, 0xc9,
	0x56, 0x4e, 0xe3, 0xd9, 0x46, 0x54, 0x4e, 0x30, 0xa7, 0x01, 0x24, 0x5f, 0x42, 0x78, 0x70, 0xc5,
	0x25, 0xc6, 0x20, 0x54, 0x6e, 0x1d, 0x07, 0xd3, 0x60, 0x16, 0x9d, 0xec, 0xc8, 0x16, 0xb0, 0xcf,
	0x30, 0x5e, 0x29, 0xaf, 0x97, 0xd8, 0x1a, 0x0b, 0x66, 0x93, 0xf9, 0xc7, 0x7f, 0x6a, 0x8c, 0x9f,
	0xf6, 0xe2, 0x27, 0x3b, 0x72, 0xd8, 0x93, 0xfc, 0x0c, 0x60, 0xbc, 0xa1, 0xd9, 0x13, 0x98, 0x28,
	0xad, 0x6d, 0xb5, 0xf6, 0xa9, 0x59, 0x50, 0x1c, 0x4c, 0xc3, 0x59, 0x24, 0x61, 0x43, 0xbd, 0x5d,
	0x10, 0x8b, 0x61, 0xec, 0x30, 0x33, 0x76, 0x4d, 0x5d, 0x70, 0x91, 0x1c, 0x20, 0x23, 0x18, 0x79,
	0x95, 0x51, 0x1c, 0x76, 0x79, 0xa6, 0xff, 0xc5, 0x36, 0xff, 0xa0, 0x32, 0x7a, 0xbd, 0xf6, 0xae,
	0x91, 0xdd, 0xb2, 0xe4, 0x39, 0x44, 0x5b, 0x8a, 0xdd, 0x87, 0x30, 0xc7, 0xa6, 0xcf, 0x53, 0xb6,
	0x47, 0xb6, 0x07, 0xb7, 0x6a, 0x55, 0x54, 0xd8, 0x65, 0x19, 0xc9, 0x1e, 0xbc, 0xdc, 0x7d, 0x11,
	0x1c, 0xdd, 0x83, 0xbb, 0x43, 0x03, 0x52, 0xdf, 0x94, 0x78, 0xf0, 0x18, 0x1e, 0x5d, 0x6d, 0xc9,
	0x2b, 0x5f, 0xd1, 0xd1, 0xfb, 0xef, 0xbf, 0x46, 0xc1, 0xd7, 0x1f, 0xfb, 0xc1, 0xa7, 0x37, 0xd7,
	0x15, 0xbf, 0xcc, 0xb3, 0xae, 0xfc, 0x37, 0xff, 0xf8, 0xf6, 0x11, 0x9c, 0xdf, 0xee, 0xda, 0xfa,
	0xec, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x56, 0x67, 0x20, 0x4a, 0x03, 0x00, 0x00,
}

func (this *AwsDiscoveryDirectiveSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsDiscoveryDirectiveSpec)
	if !ok {
		that2, ok := that.(AwsDiscoveryDirectiveSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EksSelector) != len(that1.EksSelector) {
		return false
	}
	for i := range this.EksSelector {
		if !this.EksSelector[i].Equal(that1.EksSelector[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AwsDiscoveryDirectiveSpec_AwsResourceSelector) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsDiscoveryDirectiveSpec_AwsResourceSelector)
	if !ok {
		that2, ok := that.(AwsDiscoveryDirectiveSpec_AwsResourceSelector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.SelectorType == nil {
		if this.SelectorType != nil {
			return false
		}
	} else if this.SelectorType == nil {
		return false
	} else if !this.SelectorType.Equal(that1.SelectorType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn)
	if !ok {
		that2, ok := that.(AwsDiscoveryDirectiveSpec_AwsResourceSelector_Arn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Arn != that1.Arn {
		return false
	}
	return true
}
func (this *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_)
	if !ok {
		that2, ok := that.(AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Matcher.Equal(that1.Matcher) {
		return false
	}
	return true
}
func (this *AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher)
	if !ok {
		that2, ok := that.(AwsDiscoveryDirectiveSpec_AwsResourceSelector_Matcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AccountIds) != len(that1.AccountIds) {
		return false
	}
	for i := range this.AccountIds {
		if this.AccountIds[i] != that1.AccountIds[i] {
			return false
		}
	}
	if len(this.Regions) != len(that1.Regions) {
		return false
	}
	for i := range this.Regions {
		if this.Regions[i] != that1.Regions[i] {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AwsDiscoveryDirectiveStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AwsDiscoveryDirectiveStatus)
	if !ok {
		that2, ok := that.(AwsDiscoveryDirectiveStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
